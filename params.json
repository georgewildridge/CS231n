{
  "name": "CS231n",
  "tagline": "Following Stanford's course \"Convolutional Neural Networks for Visual Recognition\"",
  "body": "This will be a comprehensive review of everything I have learned along with a walk through of my code.  I will work from the big picture down to the nitty gritty of the code. If you have questions or spot a mistake feel free to tweet me at [@Gwildridge](https://twitter.com/Gwildridge). A brief disclaimer that I am a highschool student and although the information on this page is correct to the best of my knowledge, I would not consider myself all-knowing on this material. \r\n#Introduction\r\n##Computer Vision\r\nComputer vision is the problem that Deep Learning is attempting to solve and I am attempting to learn about. The approach to understanding this has also been an approach to understanding human vision. Over the past fifty years, our understanding of human vision has been widdled down from a holistic approach where some part of our brain stores what a chair looks like to a hierarchical understanding. Hierarchical vision revolves around the understanding that our brain sees edges and that these edges define the shape. So instead of storing a chair somewhere in our brains we store a set of edges and lines that make up a chair and our brain knows which objects are which upon recognition. The overarching goal is to build a 3d model of objects within the computer. \r\nThe first approach to solving vision was edge detection nad then moved into segmentation for feature detection. For almost sixty years, people attempted to solve vision using this method… until very recently when deep leaning began being used. Now this isn't to say that Deep Learning hadn't existed until recently, it is to say that very few focused on it as a solution because it was too computationally costly. As of 2010 deep learning was a gain popularized. \r\n\r\n## Image Classification\r\nImage classification is taking an image and transform it into one of a fixed number of categories. Vision is challenging because of a number of environment variables like rotation, point of view, illumination, deformation, occlusion, background clutter and finally interclass variation. There are two approaches, the explicit approach and the data driven approach. An example of the explicit approach is the feature detection, or the association of certain characteristics with certain objects. The issue with this approach is that every time you want to classify a new object a new algorithm must be hard coded to look for those characteristics, making this method incapable of major growth. Instead, a data driven has been taken with deep learning. This involves collecting a very large dataset of images and labels. Then machine learning is used to train and image classifier on the data prior to evaluating the classifier on the test images. It is this classifier I will address next. \r\n\r\n#Assignment 1\r\nIn this assignment I will implement the k-nearest neighbor classifier, a support vector machine, the softmax classifier, backpropagation, a neural net and generate some features. \r\n\r\n##K-Nearest Neighbor Classifier\r\nThis classifier works by comparing an image for similarities to ever other image in the dataset, and is classified based of the image(s)' class that it is most similar to. By similar I am refering to the the distance's between the two images. Two different methods can be used to find the distance, the L1/Manhattan distance:\r\n![Manhattan distance](link)\r\nAnd the L2/Euclidean distance:\r\n![Euclidean Distance](link)\r\nThe image with the smallest distance between the two is considered to be the most similar image. However, what I just described was the nearest neighbor classifier. The K-nearest neighbor classifier is very similar. Instead of just stating the image with the smallest number is the most similar, K of the most similar images are retrieved before selecting the class that the majority of the K images have. \r\n\r\nIn this particular assignment we were asked to implement this classifier using the Euclidean/L2 distance in three different ways: with two for loops, with one for loop and with no for loops. This is designed to introduce us to running loops in C instead of python.\r\n\r\n###Two Loops\r\nConverting the equation into numpy operations:\r\n\t\t\t\r\n\tnum_test = X.shape[0]\r\n\tnum_train = self.X_train.shape[0]\r\n\tdists = np.zeros((num_test, num_train))\r\n\tfor i in xrange(num_test):\r\n\t\tfor j in xrange(num_train):\r\n\t\t\tdists[i,j] = np.sqrt(np.sum(np.square(X[i]-self.X_train[j])))\r\n\treturn dists\r\nWhere X[i] is the image we are attempting to find the class for and X_train[j] is the remainder of the images in the training set.\r\n\r\n###One Loop\r\nReducing the same operation to one loop\r\n\t\t\t\r\n\tfor i in xrange(num_test):\r\n\t\tdists[i,:] = np.sqrt(np.sum(np.square(X[i,:]-self.X_train),axis =1))\r\n\treturn dists\r\nThe important thing to understand in this case is what exactly something like dists[i,:] is doing. From playing around with it and from the [python tutorial](http://cs231n.github.io/python-numpy-tutorial/), I figured out that his would represent every column in row i. So basically I am saying that every column in row i of dists is equal to the Euclidean distance of every column of row i minus every image in the dataset. \r\n###No Loops\r\nNow we take it a step further, computing the euclidean distance without loops:\r\n\t\t\t\r\n\tdists = np.sqrt((X**2).sum(axis=1)[:, np.newaxis] + (self.X_train**2).sum(axis=1) - 2 * X.dot(self.X_train.T))\r\n\treturn dists\r\nTo put this into perspective I will do it on a much simpler scale. Instead of dealing with these huge matricies, pretend we are just working with two vectors, q and p. To find the [Euclidean distance](https://en.wikipedia.org/wiki/Euclidean_distance) between these two vectors we find the length of its distance vector:\r\n\r\n![Euclidean length of distance vector](https://upload.wikimedia.org/math/c/5/4/c54c79bb419dec31d93260cb9207a1d5.png)\r\n\r\nOtherwise written as:\r\n\r\n![rewritten Euclidean length of distance vector](https://upload.wikimedia.org/math/a/8/3/a8394d4ad1d858186f89be9c590a3ac8.png)\r\n\r\nAlright, now that we understand how to find the length of the two vector's distance vector, the same process is applied to the bigger matrices and that’s it. \r\n\r\n##Linear Classifier\r\nAlthough this is not a direct part of the assignment, it is necessary to understand what exactly the Support Vector Machine and the Softmax classifer are doing… so bear with me. A linear classifier involves an input (an image in this case) and a set of initially arbitrary parameters known as weights. Then we have some function. Here it is in its most basic form:\r\n![linear classifier](link)\r\nWhere x is the image's pixels (stretched into one column) and W is a one column matrix with as many rows as classes. When the two are multiplied together we get a score for each class. Basically we are computing a weighted sum of all the pixel values for each score. Ideally when we pass an image through, the correct classifier will have the lowest score; however, this is often not the case which is where the SVM and the softmax classifer come in. \r\n\r\n##Support Vector Machine\r\nUsing the output of a linear classifier given random weights, the intent of the SVM is to gauge  the degree of how wrong the classification is. It does this by repeatedly finding the difference between the lowest score and the correct score for each image.  With the output we can identify how to change the linear classifiers weights in order so the linear classifier will improve in its next pass. That was a very high level overview, now to look at exactly what is happening:\r\n![SVM](link)\r\nWhere S is a vector of class scores and 1 represents the safety margin. The scores are scale free and selected randomly. The max is taken in order to clamp possible loss at zero so negative numbers will not have a bearing on the overall loss of the function. If negative loss was allowed to pass through, it would decrease the overall loss which can distort the overall loss and make it seem like we are closer to identifying the correct scores even if we aren't. \r\n\r\nIn this part of the assignment we first compute the loss and the gradient with loops before implementing a vectorized version.\r\n\r\n###With Loops:\r\n\t\r\n\tdW = np.zeros(W.shape) # initialize the gradient as zero\r\n\t# compute the loss and the gradient\r\n\tnum_classes = W.shape[1]\r\n\tnum_train = X.shape[0]\r\n\tloss = 0.0\r\n\tfor i in xrange(num_train):\r\n\t\tscores = X[i].dot(W)\r\n\t\tdT = np.zeros(W.shape)\r\n\t\tcorrect_class_score = scores[y[i]]\r\n\t\tgradCounter = 0\r\n\t\tfor j in xrange(num_classes):\r\n\t\t\tif j == y[i]:\r\n\t\t\t\tcontinue\r\n\t\t\tmargin = scores[j] - correct_class_score + 1 # note delta = 1\r\n\t\t\tif margin > 0:\r\n\t\t\t\tloss += margin\r\n\t\t\t\tgradCounter += 1\r\n\t\t\t\tdT[:,j] = X[i] #change every column's number to that of the current picture\r\n\t\t#to the column of the correct class we then add  the gradient\r\n\t\tdT[:,y[i]] = -(gradCounter  * X[i])\r\n\t\tdW += dT\r\n\tdW = (1/num_train)*dW + reg*W\r\n\t\r\n\t# Right now the loss is a sum over all training examples, but we want it\r\n\t# to be an average instead so we divide by num_train.\r\n\tloss /= num_train\r\n\t\r\n\t# Add regularization to the loss.\r\n\tloss += 0.5 * reg * np.sum(W * W)\r\n\t\r\n\treturn loss, dW\r\n\t\r\n###Vectorized\r\n\t\r\n\tloss = 0.0\r\n\tnum_train = X.shape[0]\r\n\tnum_classes = W.shape[1]\r\n\tdW = np.zeros(W.shape) # initialize the gradient as zero\r\n\t\r\n\tscore = X.dot(W)\r\n\t   \r\n\ty_pred = score[range(score.shape[0]),y]\r\n\tprint  score.shape[0]\r\n\tmargins = score - y_pred[:,None] + 1\r\n\t#print margins\r\n\tmargins[range(score.shape[0]),y] = 0\r\n\t# print margins[0]\r\n\tmargins = np.maximum(np.zeros(margins.shape),margins)\r\n\t\r\n\tloss = np.sum(margins)\r\n\tloss /= num_train\r\n\tloss += 0.5 * reg * np.sum(W*W)\r\n\t\r\n\tMc = (margins>0).astype(float) \r\n\tMc[np.arange(num_train), y] = -1\r\n\tdW = np.dot(X.T, Mc)/ num_train + reg * W\r\n\t\r\n\treturn loss, dW\r\n\t\r\n\r\n##Softmax Classifier\r\nAgain using the scores outputted from the linear classifier given random weights, the softmax classifier interprets the scores as the unnormalized log probabilities of the classes (Andrej mentioned the reason behind this interpretation is very complex). So we first exponentiate the scores, normalize them and then take the -log to retrieve the probabilities of the classes. We then attempt to maximize the log likelihood and minimize the -log likelihood of the true class?\r\n\r\n###With Loops\r\n\t Initialize the loss and gradient to zero.\r\n\tloss = 0.0\r\n\tdW = np.zeros_like(W)\r\n\t\r\n\tnum_classes = W.shape[1]\r\n\tnum_dim = W.shape[0]\r\n\tnum_train = X.shape[0]\r\n\tprob = np.zeros((num_classes,1))\r\n\tfor i in xrange(num_train):\r\n\t\tscores = X[i].dot(W)\r\n\t\tscores -= np.max(scores) \r\n\t\tprob = np.exp(scores)/np.sum(np.exp(scores))\r\n\t\tloss += -np.log(Pi[y[i]])\r\n\t\tprob[y[i]] -= 1 \r\n\t\tdW += np.dot(np.reshape(X[i],(num_dim,1)), np.reshape(prob,(1,num_classes)))\r\n\t\r\n\tloss /= num_train\r\n\tloss += 0.5 * reg * np.sum(W * W)\r\n\tdW = (1.0/num_train)*dW + reg*W\r\n\t\r\n\treturn loss, dW\r\n###Vectorized\r\n\r\n\tscores = X.dot(W)\r\n\tscores -= np.max(scores,axis=1).reshape(num_train,1)\r\n\tprob = np.exp(scores)/np.reshape(np.sum(np.exp(scores),axis=1),(num_train,1))\r\n\tloss = -np.sum(np.log(P[(range(num_train),y)]))\r\n\tloss /= num_train\r\n\tloss += 0.5 * reg * np.sum(W * W)\r\n\t\r\n\tprob[(range(num_train),y)] = prob[(range(num_train),y)] - 1\r\n\tdW = (1.0/num_train) * np.dot(X.T,P) + reg * W\r\n\t\r\n\treturn loss, dW\r\n\t\r\n##Optimization\r\nThrough using either the SVM or the Softmax classfier we can obtain the loss, the issue of incrementing or decrementing the weights must now be addressed. One method is to randomly increase and decrease the weights and use the weights that yield the smallest loss. Or, as this is  terrible method, we could follow the slope. Basically we could compute what we will come to call an analytic gradient by taking the slope in a bunch of directions through taking a series of tiny steps. Through this we are finding the gradient, or what direction is uphill, however we are trying to decrease our values so we will take the - of the gradient and take a small step down hill.   This method is effective but it is incredibly slow and computationally expensive… it is the reason people focused on feature detection for 50 years. Instead a technique called backpropagation can be used to expedite the process and make it much less computationally expensive. \r\n\r\n###Backpropagation\r\n\r\n\r\n##Two-Layer Neural Network\r\n\r\n## Image Features\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}